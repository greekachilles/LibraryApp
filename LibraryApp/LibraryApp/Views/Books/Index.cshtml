@model IEnumerable<LibraryApp.Models.Book>

@using Microsoft.AspNetCore.Identity
@using LibraryApp.Models

@inject SignInManager<IdentityUser> signInManager
@inject UserManager<IdentityUser> userManager


@{
    ViewData["Title"] = "Index";
}

<h2>Index</h2>



<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <p>
            Find by name: <input type="text" name="SearchString" value="@ViewData["currentFilter"]" />
            <input type="submit" value="Search" class="btn btn-default" />

        </p>
        Sort by availability:
        <select name="catChoice" asp-items="ViewBag.avail"></select>
        <input type="submit" value="Filter" class="btn btn-default" />
        <br />

        <p><a asp-action="Index">Back to Full List</a></p>
        @if (signInManager.IsSignedIn(User))
        {
            var currentUser = await userManager.GetUserAsync(User);
            var isAdmin = currentUser != null
                && await userManager.IsInRoleAsync(
                    currentUser, Constants.AdminRole);

            if (isAdmin)
            {
                <p><a asp-action="Checkout">Check out a book</a></p>
                <p>
                    <a asp-action="Create">Add new book</a>
                </p>
            }
        }
    </div>
</form>



<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Author)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Year)
            </th>
            <th>
                Available
            </th>
            @if (signInManager.IsSignedIn(User))
            {
                var currentUser = await userManager.GetUserAsync(User);
                var isAdmin = currentUser != null
                    && await userManager.IsInRoleAsync(
                        currentUser, Constants.AdminRole);

                if (isAdmin)
                {
                    <th></th>
                }
            }
                </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Author)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Year)
            </td>
            <td>


                @if (item.BorrowerId == null)
                {
                    <p>Yes</p>
                }
                else
                {
                    <p>No</p>
                }
            </td>


            @if (signInManager.IsSignedIn(User))
            {
                var currentUser = await userManager.GetUserAsync(User);
                var isAdmin = currentUser != null
                    && await userManager.IsInRoleAsync(
                        currentUser, Constants.AdminRole);

                if (isAdmin)
                {
            <td>
                <a asp-action="Edit" asp-route-id="@item.BookId">Edit</a>
                @HtmlEncoder.Encode("|")
                <a asp-action="Details" asp-route-id="@item.BookId">Details</a>
                @HtmlEncoder.Encode("|")
                <a asp-action="Delete" ifp-route-id="@item.BookId">Delete</a>
            </td>


                        }
                        }
                    
                </tr>
        }
    </tbody>
</table>
