@model PaginatedList<LibraryApp.Models.Book>

@using Microsoft.AspNetCore.Identity
@using LibraryApp.Models

@inject SignInManager<IdentityUser> signInManager
@inject UserManager<IdentityUser> userManager


@{
    ViewData["Title"] = "Books Index";
}

<h2>Books Index</h2>



<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <p>
            Find by name: <input type="text" name="SearchString" value="@ViewData["CurrentFilter"]" />


        </p>
       
       
        <input type="submit" value="Go" class="btn btn-default" />

        <p><a asp-action="Index">Back to Full List</a></p>
        @if (signInManager.IsSignedIn(User))
        {
            var currentUser = await userManager.GetUserAsync(User);
            var isAdmin = currentUser != null
                && await userManager.IsInRoleAsync(
                    currentUser, Constants.AdminRole);

            if (isAdmin)
            {

                <p>
                    <a asp-action="Create">Add new book</a>
                </p>
            }
        }
    </div>
</form>



<table class="table">
    <thead>
        <tr>
            @if (signInManager.IsSignedIn(User))
            {
                var currentUser = await userManager.GetUserAsync(User);
                var isAdmin = currentUser != null
                    && await userManager.IsInRoleAsync(
                        currentUser, Constants.AdminRole);

                if (isAdmin)
                {

            <th style="width:75px;"></th>
            <th style="width:75px;"></th>
                }
            }
            <th style="width:30%;">
                <a asp-action="Index" asp-route-sortOrder="@ViewData["NameSortParam"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Book Title</a>
            </th>
            <th style="width:20%;">
                <a asp-action="Index" asp-route-sortOrder="@ViewData["AuthorSortParam"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Author</a>
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["YearSortParam"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Year</a>
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["AvailSortParam"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Available</a>
            </th>
            @if (signInManager.IsSignedIn(User))
            {
                var currentUser = await userManager.GetUserAsync(User);
                var isAdmin = currentUser != null
                    && await userManager.IsInRoleAsync(
                        currentUser, Constants.AdminRole);

                if (isAdmin)
                {
                    <th></th>

                }
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                @if (signInManager.IsSignedIn(User))
                {
                    var currentUser = await userManager.GetUserAsync(User);
                    var isAdmin = currentUser != null
                        && await userManager.IsInRoleAsync(
                            currentUser, Constants.AdminRole);

                    if (isAdmin)
                    {


                        <td>
                            <a asp-action="Checkout" asp-route-id="@item.BookId" style="text-decoration:none">
                                @if (item.BorrowerId == null)
                                {
                                    <button id="checkout" class="btn btn-default">Checkout</button>
                                }
                                else
                                {
                                    <button id="checkout" class="btn btn-default" disabled="disabled">Checkout</button>
                                }


                            </a><br />
                        </td>

                        <td>
                            <a asp-action="Return" asp-route-id="@item.BookId" style="text-decoration:none">
                                @if (item.BorrowerId != null)
                                {
                                    <button id="return" class="btn btn-default">Return</button>
                                }
                                else
                                {
                                    <button id="return" class="btn btn-default" disabled="disabled">Return</button>
                                }


                            </a><br />
                        </td>


                    }
                }
                <td>

                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Author)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Year)
                </td>
                <td>


                    @if (item.BorrowerId == null)
                    {
                        <p>Yes</p>
                    }
                    else
                    {
                        <p>No</p>
                    }
                </td>


                @if (signInManager.IsSignedIn(User))
                {
                    var currentUser = await userManager.GetUserAsync(User);
                    var isAdmin = currentUser != null
                        && await userManager.IsInRoleAsync(
                            currentUser, Constants.AdminRole);

                    if (isAdmin)
                    {
                        <td>

                            <a asp-action="Edit" asp-route-id="@item.BookId">Edit</a>
                            @HtmlEncoder.Encode("|")
                            <a asp-action="Details" asp-route-id="@item.BookId">Details</a>
                            @HtmlEncoder.Encode("|")
                            <a asp-action="Delete" asp-route-id="@item.BookId">Delete</a>
                        </td>



                    }
                }

            </tr>
        }
    </tbody>
</table>



@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-page="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
asp-route-currentCatChoice="@ViewData["CatChoice"]"
   class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
asp-route-currentCatChoice="@ViewData["CatChoice"]"
   asp-route-page="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"

   class="btn btn-default @nextDisabled">
    Next
</a>